// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  users          User[]
  bots           Bot[]
  knowledgeBases KnowledgeBase[]
  UploadFile     UploadFile[]
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id         String   @id @default(cuid())
  supabaseId String   @unique
  email      String   @unique
  name       String?
  avatarUrl  String?
  role       UserRole @default(USER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model KnowledgeBase {
  id               String             @id @default(cuid())
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  documents        Document[]
  BotKnowledgeBase BotKnowledgeBase[]
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  tenantId         String
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Document {
  id              String            @id @default(cuid())
  name            String
  metadata        Json?
  mimeType        String?
  chunkSize       Int?
  enabled         Boolean           @default(true)
  status          DocumentStatus    @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase     @relation(fields: [knowledgeBaseId], references: [id])
  segments        DocumentSegment[]
}

model DocumentSegment {
  id           String   @id @default(cuid())
  documentId   String
  vectorId     String
  chunkContent String
  position     Int
  enabled      Boolean  @default(true)
  wordCount    Int
  keywords     String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  document     Document @relation(fields: [documentId], references: [id])
}

model Bot {
  id                      String             @id @default(cuid())
  name                    String
  type                    String
  description             String?
  emptyResponse           String?
  openeStatement          String?
  showQuote               Boolean            @default(false)
  systemPrompt            String
  similarityThreshold     Float              @default(0.5)
  keywordSimilarityWeight Float              @default(0.5)
  topN                    Int                @default(5)
  temperature             Float              @default(0.5)
  topP                    Float              @default(0.5)
  presencePenalty         Float              @default(0.5)
  frequencyPenalty        Float              @default(0.5)
  maxTokens               Int                @default(512)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  botKnowledgeBase        BotKnowledgeBase[]
  Conversation            Conversation[]
  Tenant                  Tenant             @relation(fields: [tenantId], references: [id])
  tenantId                String
}

model BotKnowledgeBase {
  id              String        @id @default(cuid())
  botId           String
  knowledgeBaseId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bot             Bot           @relation(fields: [botId], references: [id])
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
}

model Conversation {
  id        String    @id @default(cuid())
  name      String
  botId     String
  bot       Bot       @relation(fields: [botId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

enum MessageRole {
  human
  ai
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ProcessStatus {
  id          String   @id @default(cuid())
  status      String
  progress    Float    @default(0)
  totalSteps  Int      @default(1)
  currentStep Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UploadFile {
  id          String   @id @default(cuid())
  storageType String
  // ファイルのパス
  key         String
  name        String
  size        Int
  extension   String
  mimeType    String?
  createdBy   String
  createdAt   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}
